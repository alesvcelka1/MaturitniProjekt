import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

/// Service pro spr√°vu datab√°zov√Ωch operac√≠
class DatabaseService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  /// Reference na kolekce
  static CollectionReference get workouts => _firestore.collection('workouts');
  static CollectionReference get users => _firestore.collection('users');
  static CollectionReference get exercises => _firestore.collection('exercises');

  /// Vytvo≈ô√≠ uk√°zkov√° data v datab√°zi
  static Future<void> seedDatabase() async {
    try {
      print('üå± Zaƒç√≠n√°m s seed datab√°ze...');

      // 1. Vytvo≈ôen√≠ uk√°zkov√Ωch u≈æivatel≈Ø (klient≈Ø)
      await _createSampleClients();

      // 2. Vytvo≈ôen√≠ uk√°zkov√Ωch cvik≈Ø
      await _createSampleExercises();

      // 3. Vytvo≈ôen√≠ uk√°zkov√Ωch tr√©nink≈Ø
      await _createSampleWorkouts();

      print('‚úÖ Seed datab√°ze dokonƒçen!');
    } catch (e) {
      print('‚ùå Chyba p≈ôi seed datab√°ze: $e');
    }
  }

  /// Vytvo≈ô√≠ uk√°zkov√© klienty
  static Future<void> _createSampleClients() async {
    final clients = [
      {
        'email': 'klient1@test.com',
        'role': 'client',
        'display_name': 'Jan Nov√°k',
        'created_at': FieldValue.serverTimestamp(),
        'age': 25,
        'fitness_level': 'zaƒç√°teƒçn√≠k',
      },
      {
        'email': 'klient2@test.com',
        'role': 'client',
        'display_name': 'Marie Svobodov√°',
        'created_at': FieldValue.serverTimestamp(),
        'age': 32,
        'fitness_level': 'pokroƒçil√Ω',
      },
      {
        'email': 'klient3@test.com',
        'role': 'client',
        'display_name': 'Petr Dvo≈ô√°k',
        'created_at': FieldValue.serverTimestamp(),
        'age': 28,
        'fitness_level': 'st≈ôedn√≠',
      },
    ];

    for (var client in clients) {
      await users.doc(client['email'] as String).set(client);
    }
    print('üë• Vyto≈ôeno ${clients.length} uk√°zkov√Ωch klient≈Ø');
  }

  /// Vytvo≈ô√≠ uk√°zkov√© cviky
  static Future<void> _createSampleExercises() async {
    final exercises = [
      {
        'name': 'Kliky',
        'category': 'hrudn√≠k',
        'difficulty': 'lehk√Ω',
        'equipment': '≈æ√°dn√©',
        'description': 'Z√°kladn√≠ cvik pro pos√≠len√≠ horn√≠ ƒç√°sti tƒõla',
      },
      {
        'name': 'D≈ôepy',
        'category': 'nohy',
        'difficulty': 'lehk√Ω',
        'equipment': '≈æ√°dn√©',
        'description': 'Z√°kladn√≠ cvik pro pos√≠len√≠ doln√≠ ƒç√°sti tƒõla',
      },
      {
        'name': 'Bench press',
        'category': 'hrudn√≠k',
        'difficulty': 'st≈ôedn√≠',
        'equipment': 'ƒçinky',
        'description': 'Klasick√Ω cvik s ƒçinkou na lavici',
      },
      {
        'name': 'Deadlift',
        'category': 'z√°da',
        'difficulty': 'tƒõ≈æk√Ω',
        'equipment': 'ƒçinky',
        'description': 'Zved√°n√≠ ƒçinky ze zemƒõ',
      },
      {
        'name': 'Plank',
        'category': 'core',
        'difficulty': 'st≈ôedn√≠',
        'equipment': '≈æ√°dn√©',
        'description': 'Statick√Ω cvik pro pos√≠len√≠ st≈ôedu tƒõla',
      },
    ];

    for (var exercise in exercises) {
      await DatabaseService.exercises.add(exercise);
    }
    print('üí™ Vyto≈ôeno ${exercises.length} uk√°zkov√Ωch cvik≈Ø');
  }

  /// Vytvo≈ô√≠ uk√°zkov√© tr√©ninky
  static Future<void> _createSampleWorkouts() async {
    final currentUser = _auth.currentUser;
    if (currentUser == null) {
      print('‚ö†Ô∏è ≈Ω√°dn√Ω p≈ôihl√°≈°en√Ω u≈æivatel - p≈ôeskakujem vytv√°≈ôen√≠ tr√©nink≈Ø');
      return;
    }

    final workouts = [
      {
        'workout_name': 'Zaƒç√°teƒçnick√Ω tr√©nink',
        'description': 'Z√°kladn√≠ tr√©nink pro nov√© ƒçleny',
        'trainer_id': currentUser.uid,
        'client_ids': ['klient1@test.com', 'klient2@test.com'],
        'estimated_duration': 30,
        'created_at': FieldValue.serverTimestamp(),
        'exercises': [
          {
            'name': 'Kliky',
            'sets': 3,
            'reps': 10,
            'load': 'vlastn√≠ v√°ha',
            'note': 'Pomalu a kontrolovanƒõ',
          },
          {
            'name': 'D≈ôepy',
            'sets': 3,
            'reps': 15,
            'load': 'vlastn√≠ v√°ha',
            'note': 'Kolena nesm√≠ p≈ôekroƒçit ≈°piƒçky',
          },
          {
            'name': 'Plank',
            'sets': 3,
            'reps': 30,
            'load': 'vlastn√≠ v√°ha',
            'note': 'Dr≈æ po dobu 30 sekund',
          },
        ],
      },
      {
        'workout_name': 'Pokroƒçil√Ω silov√Ω tr√©nink',
        'description': 'Intenzivn√≠ tr√©nink pro pokroƒçil√©',
        'trainer_id': currentUser.uid,
        'client_ids': ['klient2@test.com', 'klient3@test.com'],
        'estimated_duration': 60,
        'created_at': FieldValue.serverTimestamp(),
        'exercises': [
          {
            'name': 'Bench press',
            'sets': 4,
            'reps': 8,
            'load': '80 kg',
            'note': 'Kontroluj pohyb, pomoc spottera',
          },
          {
            'name': 'Deadlift',
            'sets': 4,
            'reps': 6,
            'load': '100 kg',
            'note': 'Rovn√° z√°da, kontrolovan√© zved√°n√≠',
          },
          {
            'name': 'D≈ôepy',
            'sets': 4,
            'reps': 12,
            'load': '60 kg',
            'note': 'Hlubok√© d≈ôepy pod 90¬∞',
          },
        ],
      },
      {
        'workout_name': 'Cardio mix',
        'description': 'Kombinace kardio a funkƒçn√≠ch cvik≈Ø',
        'trainer_id': currentUser.uid,
        'client_ids': ['klient1@test.com', 'klient3@test.com'],
        'estimated_duration': 45,
        'created_at': FieldValue.serverTimestamp(),
        'exercises': [
          {
            'name': 'Burpees',
            'sets': 4,
            'reps': 10,
            'load': 'vlastn√≠ v√°ha',
            'note': 'Vysok√° intenzita',
          },
          {
            'name': 'Mountain climbers',
            'sets': 3,
            'reps': 20,
            'load': 'vlastn√≠ v√°ha',
            'note': 'Rychl√© tempo',
          },
          {
            'name': 'Jump squats',
            'sets': 3,
            'reps': 15,
            'load': 'vlastn√≠ v√°ha',
            'note': 'Explozivn√≠ pohyb',
          },
        ],
      },
    ];

    for (var workout in workouts) {
      await DatabaseService.workouts.add(workout);
    }
    print('üèãÔ∏è Vyto≈ôeno ${workouts.length} uk√°zkov√Ωch tr√©nink≈Ø');
  }

  /// Vyma≈æe v≈°echna testovac√≠ data
  static Future<void> clearTestData() async {
    try {
      print('üßπ Ma≈æu testovac√≠ data...');
      
      // Sma≈æu v≈°echny tr√©ninky
      final workoutsSnapshot = await workouts.get();
      for (var doc in workoutsSnapshot.docs) {
        await doc.reference.delete();
      }
      
      // Sma≈æu testovac√≠ u≈æivatele
      final testEmails = ['klient1@test.com', 'klient2@test.com', 'klient3@test.com'];
      for (var email in testEmails) {
        await users.doc(email).delete();
      }
      
      // Sma≈æu cviky
      final exercisesSnapshot = await exercises.get();
      for (var doc in exercisesSnapshot.docs) {
        await doc.reference.delete();
      }
      
      print('‚úÖ Testovac√≠ data smaz√°na');
    } catch (e) {
      print('‚ùå Chyba p≈ôi maz√°n√≠ dat: $e');
    }
  }

  /// Zkontroluje p≈ôipojen√≠ k datab√°zi
  static Future<bool> testConnection() async {
    try {
      print('üîå Testuji p≈ôipojen√≠ k datab√°zi...');
      await _firestore.collection('test').doc('connection').set({
        'timestamp': FieldValue.serverTimestamp(),
        'message': 'Test p≈ôipojen√≠',
      });
      
      await _firestore.collection('test').doc('connection').delete();
      print('‚úÖ P≈ôipojen√≠ k datab√°zi funguje!');
      return true;
    } catch (e) {
      print('‚ùå Chyba p≈ôipojen√≠ k datab√°zi: $e');
      return false;
    }
  }

  /// Vytvo≈ô√≠ profil u≈æivatele v datab√°zi
  static Future<void> createUserProfile(User user, {String role = 'client'}) async {
    try {
      await users.doc(user.uid).set({
        'email': user.email,
        'display_name': user.displayName ?? user.email?.split('@')[0],
        'role': role,
        'created_at': FieldValue.serverTimestamp(),
        'photo_url': user.photoURL,
        'last_login': FieldValue.serverTimestamp(),
      }, SetOptions(merge: true));
      
      print('üë§ Profil u≈æivatele vytvo≈ôen/aktualizov√°n: ${user.email}');
    } catch (e) {
      print('‚ùå Chyba p≈ôi vytv√°≈ôen√≠ profilu: $e');
    }
  }

  /// Z√≠sk√° tr√©ninky pro konkr√©tn√≠ho tren√©ra
  static Stream<QuerySnapshot> getTrainerWorkouts(String trainerId) {
    return workouts
        .where('trainer_id', isEqualTo: trainerId)
        // Doƒçasnƒõ bez orderBy - vy≈æaduje index
        // .orderBy('created_at', descending: true)
        .snapshots();
  }

  /// Z√≠sk√° tr√©ninky p≈ôi≈ôazen√© klientovi
  static Stream<QuerySnapshot> getClientWorkouts(String clientEmail) {
    return workouts
        .where('client_ids', arrayContains: clientEmail)
        // Doƒçasnƒõ bez orderBy - vy≈æaduje index
        // .orderBy('created_at', descending: true)
        .snapshots();
  }

  /// Z√≠sk√° v≈°echny klienty pro multi-select
  static Future<List<Map<String, dynamic>>> getAllClients() async {
    try {
      final snapshot = await users
          .where('role', isEqualTo: 'client')
          .get();
      
      return snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return data;
      }).toList();
    } catch (e) {
      print('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ klient≈Ø: $e');
      return [];
    }
  }
}